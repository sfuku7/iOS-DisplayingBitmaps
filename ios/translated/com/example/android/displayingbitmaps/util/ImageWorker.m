//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/Application/src/shared/java//com/example/android/displayingbitmaps/util/ImageWorker.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/example/android/common/logger/Log.h"
#include "com/example/android/displayingbitmaps/util/AbstractBitmap.h"
#include "com/example/android/displayingbitmaps/util/AbstractBitmapDrawable.h"
#include "com/example/android/displayingbitmaps/util/AbstractBitmapDrawableFactory.h"
#include "com/example/android/displayingbitmaps/util/AbstractBitmapFactory.h"
#include "com/example/android/displayingbitmaps/util/AbstractImageView.h"
#include "com/example/android/displayingbitmaps/util/AsyncTask.h"
#include "com/example/android/displayingbitmaps/util/DiskEnvironment.h"
#include "com/example/android/displayingbitmaps/util/ImageCache.h"
#include "com/example/android/displayingbitmaps/util/ImageWorker.h"
#include "com/example/android/displayingbitmaps/util/MemoryImageCacheFactory.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Void.h"

#define ComExampleAndroidDisplayingbitmapsUtilImageWorker_FADE_IN_TIME 200
#define ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_CLEAR 0
#define ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_INIT_DISK_CACHE 1
#define ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_FLUSH 2
#define ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_CLOSE 3

@interface ComExampleAndroidDisplayingbitmapsUtilImageWorker () {
 @public
  ComExampleAndroidDisplayingbitmapsUtilImageCache *mImageCache_;
  ComExampleAndroidDisplayingbitmapsUtilImageCache_ImageCacheParams *mImageCacheParams_;
  id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmap> mLoadingBitmap_;
  jboolean mFadeInBitmap_;
  jboolean mExitTasksEarly_;
  id mPauseWorkLock_;
  id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory> mBitmapDrawableFactory_;
  id<ComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory> mMemoryImageCacheFactory_;
  ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *mDiskEnvironment_;
  id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation> mThreadOperation_;
}

+ (ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *)getBitmapWorkerTaskWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>)imageView;

- (void)setImageDrawableWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>)imageView
                   withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable>)drawable;

@end

J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, mImageCache_, ComExampleAndroidDisplayingbitmapsUtilImageCache *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, mImageCacheParams_, ComExampleAndroidDisplayingbitmapsUtilImageCache_ImageCacheParams *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, mLoadingBitmap_, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmap>)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, mPauseWorkLock_, id)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, mBitmapDrawableFactory_, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory>)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, mMemoryImageCacheFactory_, id<ComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory>)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, mDiskEnvironment_, ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, mThreadOperation_, id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation>)

static NSString *ComExampleAndroidDisplayingbitmapsUtilImageWorker_TAG_ = @"ImageWorker";
J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, TAG_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, FADE_IN_TIME, jint)

J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, MESSAGE_CLEAR, jint)

J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, MESSAGE_INIT_DISK_CACHE, jint)

J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, MESSAGE_FLUSH, jint)

J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker, MESSAGE_CLOSE, jint)

__attribute__((unused)) static ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *ComExampleAndroidDisplayingbitmapsUtilImageWorker_getBitmapWorkerTaskWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> imageView);

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilImageWorker_setImageDrawableWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable_(ComExampleAndroidDisplayingbitmapsUtilImageWorker *self, id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> imageView, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable> drawable);

@interface ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask () {
 @public
  ComExampleAndroidDisplayingbitmapsUtilImageWorker *this$0_;
  id mData_;
  id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> mImageView_;
  id<ComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener> mOnImageLoadedListener_;
}

- (id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>)getAttachedImageView;

@end

J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask, this$0_, ComExampleAndroidDisplayingbitmapsUtilImageWorker *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask, mData_, id)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask, mImageView_, id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask, mOnImageLoadedListener_, id<ComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener>)

__attribute__((unused)) static id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_getAttachedImageView(ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *self);

@interface ComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener : NSObject

@end

@interface ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask () {
 @public
  ComExampleAndroidDisplayingbitmapsUtilImageWorker *this$0_;
}

@end

J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask, this$0_, ComExampleAndroidDisplayingbitmapsUtilImageWorker *)

@implementation ComExampleAndroidDisplayingbitmapsUtilImageWorker

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory>)bitmapFactory
            withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory>)bitmapDrawableFactory
                  withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory:(id<ComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory>)memoryImageCacheFactory
                          withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment:(ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *)env
                withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation:(id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation>)accessor {
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_initWithComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(self, bitmapFactory, bitmapDrawableFactory, memoryImageCacheFactory, env, accessor);
  return self;
}

- (void)loadImageWithId:(id)data
withComExampleAndroidDisplayingbitmapsUtilAbstractImageView:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>)imageView
withComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener:(id<ComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener>)listener {
  if (data == nil) {
    return;
  }
  id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable> value = nil;
  if (mImageCache_ != nil) {
    value = [mImageCache_ getBitmapFromMemCacheWithNSString:NSString_valueOf_(data)];
  }
  if (value != nil) {
    [((id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>) nil_chk(imageView)) setImageDrawableWithComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable:value];
    if (listener != nil) {
      [listener onImageLoadedWithBoolean:true];
    }
  }
  else if (ComExampleAndroidDisplayingbitmapsUtilImageWorker_cancelPotentialWorkWithId_withComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(data, imageView)) {
    ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *task = [new_ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withId_withComExampleAndroidDisplayingbitmapsUtilAbstractImageView_withComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener_(self, mThreadOperation_, data, imageView, listener) autorelease];
    [((id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>) nil_chk(imageView)) setAsyncDrawableWithComExampleAndroidDisplayingbitmapsUtilAbstractBitmap:mLoadingBitmap_ withComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask:task];
    [task executeOnExecutorWithJavaUtilConcurrentExecutor:JreLoadStatic(ComExampleAndroidDisplayingbitmapsUtilAsyncTask, DUAL_THREAD_EXECUTOR_) withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangVoid_class_()]];
  }
}

- (void)loadImageWithId:(id)data
withComExampleAndroidDisplayingbitmapsUtilAbstractImageView:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>)imageView {
  [self loadImageWithId:data withComExampleAndroidDisplayingbitmapsUtilAbstractImageView:imageView withComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener:nil];
}

- (void)setLoadingImageWithComExampleAndroidDisplayingbitmapsUtilAbstractBitmap:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmap>)bitmap {
  JreStrongAssign(&mLoadingBitmap_, bitmap);
}

- (void)setLoadingImageWithInt:(jint)resId {
  JreStrongAssign(&mLoadingBitmap_, [((id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory>) nil_chk(mBitmapFactory_)) decodeResourceWithInt:resId]);
}

- (void)addImageCacheWithComExampleAndroidDisplayingbitmapsUtilImageCache_ObjectHolderFactory:(id<ComExampleAndroidDisplayingbitmapsUtilImageCache_ObjectHolderFactory>)objectHolderFactory
                        withComExampleAndroidDisplayingbitmapsUtilImageCache_ImageCacheParams:(ComExampleAndroidDisplayingbitmapsUtilImageCache_ImageCacheParams *)cacheParams {
  JreStrongAssign(&mImageCacheParams_, cacheParams);
  JreStrongAssign(&mImageCache_, ComExampleAndroidDisplayingbitmapsUtilImageCache_getInstanceWithComExampleAndroidDisplayingbitmapsUtilImageCache_ObjectHolderFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilImageCache_ImageCacheParams_(objectHolderFactory, mMemoryImageCacheFactory_, mBitmapFactory_, mImageCacheParams_));
  [((ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask *) [new_ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(self, mThreadOperation_) autorelease]) executeWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_INIT_DISK_CACHE) } count:1 type:NSObject_class_()]];
}

- (void)addImageCacheWithComExampleAndroidDisplayingbitmapsUtilImageCache_ObjectHolderFactory:(id<ComExampleAndroidDisplayingbitmapsUtilImageCache_ObjectHolderFactory>)objectHolderFactory
                                                                                 withNSString:(NSString *)diskCacheDirectoryPath {
  JreStrongAssignAndConsume(&mImageCacheParams_, new_ComExampleAndroidDisplayingbitmapsUtilImageCache_ImageCacheParams_initWithComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_withNSString_(mDiskEnvironment_, diskCacheDirectoryPath));
  JreStrongAssign(&mImageCache_, ComExampleAndroidDisplayingbitmapsUtilImageCache_getInstanceWithComExampleAndroidDisplayingbitmapsUtilImageCache_ObjectHolderFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilImageCache_ImageCacheParams_(objectHolderFactory, mMemoryImageCacheFactory_, mBitmapFactory_, mImageCacheParams_));
  [((ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask *) [new_ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(self, mThreadOperation_) autorelease]) executeWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_INIT_DISK_CACHE) } count:1 type:NSObject_class_()]];
}

- (void)setImageFadeInWithBoolean:(jboolean)fadeIn {
  mFadeInBitmap_ = fadeIn;
}

- (void)setExitTasksEarlyWithBoolean:(jboolean)exitTasksEarly {
  mExitTasksEarly_ = exitTasksEarly;
  [self setPauseWorkWithBoolean:false];
}

- (id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmap>)processBitmapWithId:(id)data {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComExampleAndroidDisplayingbitmapsUtilImageCache *)getImageCache {
  return mImageCache_;
}

+ (void)cancelWorkWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>)imageView {
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_cancelWorkWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(imageView);
}

+ (jboolean)cancelPotentialWorkWithId:(id)data
withComExampleAndroidDisplayingbitmapsUtilAbstractImageView:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>)imageView {
  return ComExampleAndroidDisplayingbitmapsUtilImageWorker_cancelPotentialWorkWithId_withComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(data, imageView);
}

+ (ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *)getBitmapWorkerTaskWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>)imageView {
  return ComExampleAndroidDisplayingbitmapsUtilImageWorker_getBitmapWorkerTaskWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(imageView);
}

- (void)setImageDrawableWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>)imageView
                   withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable>)drawable {
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_setImageDrawableWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable_(self, imageView, drawable);
}

- (void)setPauseWorkWithBoolean:(jboolean)pauseWork {
  @synchronized(mPauseWorkLock_) {
    mPauseWork_ = pauseWork;
    if (!mPauseWork_) {
      [nil_chk(mPauseWorkLock_) notifyAll];
    }
  }
}

- (void)initDiskCacheInternal {
  if (mImageCache_ != nil) {
    [mImageCache_ initDiskCache];
  }
}

- (void)clearCacheInternal {
  if (mImageCache_ != nil) {
    [mImageCache_ clearCache];
  }
}

- (void)flushCacheInternal {
  if (mImageCache_ != nil) {
    [mImageCache_ flush];
  }
}

- (void)closeCacheInternal {
  if (mImageCache_ != nil) {
    [mImageCache_ close];
    JreStrongAssign(&mImageCache_, nil);
  }
}

- (void)clearCache {
  [((ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask *) [new_ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(self, mThreadOperation_) autorelease]) executeWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_CLEAR) } count:1 type:NSObject_class_()]];
}

- (void)flushCache {
  [((ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask *) [new_ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(self, mThreadOperation_) autorelease]) executeWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_FLUSH) } count:1 type:NSObject_class_()]];
}

- (void)closeCache {
  [((ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask *) [new_ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(self, mThreadOperation_) autorelease]) executeWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_CLOSE) } count:1 type:NSObject_class_()]];
}

- (void)dealloc {
  RELEASE_(mImageCache_);
  RELEASE_(mImageCacheParams_);
  RELEASE_(mLoadingBitmap_);
  RELEASE_(mPauseWorkLock_);
  RELEASE_(mBitmapFactory_);
  RELEASE_(mBitmapDrawableFactory_);
  RELEASE_(mMemoryImageCacheFactory_);
  RELEASE_(mDiskEnvironment_);
  RELEASE_(mThreadOperation_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory:withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory:withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory:withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment:withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation:", "ImageWorker", NULL, 0x4, NULL, NULL },
    { "loadImageWithId:withComExampleAndroidDisplayingbitmapsUtilAbstractImageView:withComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener:", "loadImage", "V", 0x1, NULL, NULL },
    { "loadImageWithId:withComExampleAndroidDisplayingbitmapsUtilAbstractImageView:", "loadImage", "V", 0x1, NULL, NULL },
    { "setLoadingImageWithComExampleAndroidDisplayingbitmapsUtilAbstractBitmap:", "setLoadingImage", "V", 0x1, NULL, NULL },
    { "setLoadingImageWithInt:", "setLoadingImage", "V", 0x1, NULL, NULL },
    { "addImageCacheWithComExampleAndroidDisplayingbitmapsUtilImageCache_ObjectHolderFactory:withComExampleAndroidDisplayingbitmapsUtilImageCache_ImageCacheParams:", "addImageCache", "V", 0x1, NULL, NULL },
    { "addImageCacheWithComExampleAndroidDisplayingbitmapsUtilImageCache_ObjectHolderFactory:withNSString:", "addImageCache", "V", 0x1, NULL, NULL },
    { "setImageFadeInWithBoolean:", "setImageFadeIn", "V", 0x1, NULL, NULL },
    { "setExitTasksEarlyWithBoolean:", "setExitTasksEarly", "V", 0x1, NULL, NULL },
    { "processBitmapWithId:", "processBitmap", "Lcom.example.android.displayingbitmaps.util.AbstractBitmap;", 0x404, NULL, NULL },
    { "getImageCache", NULL, "Lcom.example.android.displayingbitmaps.util.ImageCache;", 0x4, NULL, NULL },
    { "cancelWorkWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView:", "cancelWork", "V", 0x9, NULL, NULL },
    { "cancelPotentialWorkWithId:withComExampleAndroidDisplayingbitmapsUtilAbstractImageView:", "cancelPotentialWork", "Z", 0x9, NULL, NULL },
    { "getBitmapWorkerTaskWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView:", "getBitmapWorkerTask", "Lcom.example.android.displayingbitmaps.util.ImageWorker$BitmapWorkerTask;", 0xa, NULL, NULL },
    { "setImageDrawableWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView:withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable:", "setImageDrawable", "V", 0x2, NULL, NULL },
    { "setPauseWorkWithBoolean:", "setPauseWork", "V", 0x1, NULL, NULL },
    { "initDiskCacheInternal", NULL, "V", 0x4, NULL, NULL },
    { "clearCacheInternal", NULL, "V", 0x4, NULL, NULL },
    { "flushCacheInternal", NULL, "V", 0x4, NULL, NULL },
    { "closeCacheInternal", NULL, "V", 0x4, NULL, NULL },
    { "clearCache", NULL, "V", 0x1, NULL, NULL },
    { "flushCache", NULL, "V", 0x1, NULL, NULL },
    { "closeCache", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG_", NULL, 0x1a, "Ljava.lang.String;", &ComExampleAndroidDisplayingbitmapsUtilImageWorker_TAG_, NULL, .constantValue.asLong = 0 },
    { "FADE_IN_TIME", "FADE_IN_TIME", 0x1a, "I", NULL, NULL, .constantValue.asInt = ComExampleAndroidDisplayingbitmapsUtilImageWorker_FADE_IN_TIME },
    { "mImageCache_", NULL, 0x2, "Lcom.example.android.displayingbitmaps.util.ImageCache;", NULL, NULL, .constantValue.asLong = 0 },
    { "mImageCacheParams_", NULL, 0x2, "Lcom.example.android.displayingbitmaps.util.ImageCache$ImageCacheParams;", NULL, NULL, .constantValue.asLong = 0 },
    { "mLoadingBitmap_", NULL, 0x2, "Lcom.example.android.displayingbitmaps.util.AbstractBitmap;", NULL, NULL, .constantValue.asLong = 0 },
    { "mFadeInBitmap_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mExitTasksEarly_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mPauseWork_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mPauseWorkLock_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "MESSAGE_CLEAR", "MESSAGE_CLEAR", 0x1a, "I", NULL, NULL, .constantValue.asInt = ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_CLEAR },
    { "MESSAGE_INIT_DISK_CACHE", "MESSAGE_INIT_DISK_CACHE", 0x1a, "I", NULL, NULL, .constantValue.asInt = ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_INIT_DISK_CACHE },
    { "MESSAGE_FLUSH", "MESSAGE_FLUSH", 0x1a, "I", NULL, NULL, .constantValue.asInt = ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_FLUSH },
    { "MESSAGE_CLOSE", "MESSAGE_CLOSE", 0x1a, "I", NULL, NULL, .constantValue.asInt = ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_CLOSE },
    { "mBitmapFactory_", NULL, 0x14, "Lcom.example.android.displayingbitmaps.util.AbstractBitmapFactory;", NULL, NULL, .constantValue.asLong = 0 },
    { "mBitmapDrawableFactory_", NULL, 0x12, "Lcom.example.android.displayingbitmaps.util.AbstractBitmapDrawableFactory;", NULL, NULL, .constantValue.asLong = 0 },
    { "mMemoryImageCacheFactory_", NULL, 0x12, "Lcom.example.android.displayingbitmaps.util.MemoryImageCacheFactory;", NULL, NULL, .constantValue.asLong = 0 },
    { "mDiskEnvironment_", NULL, 0x12, "Lcom.example.android.displayingbitmaps.util.DiskEnvironment;", NULL, NULL, .constantValue.asLong = 0 },
    { "mThreadOperation_", NULL, 0x12, "Lcom.example.android.displayingbitmaps.util.AsyncTask$ThreadOperation;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.example.android.displayingbitmaps.util.ImageWorker$BitmapWorkerTask;", "Lcom.example.android.displayingbitmaps.util.ImageWorker$OnImageLoadedListener;", "Lcom.example.android.displayingbitmaps.util.ImageWorker$CacheAsyncTask;"};
  static const J2ObjcClassInfo _ComExampleAndroidDisplayingbitmapsUtilImageWorker = { 2, "ImageWorker", "com.example.android.displayingbitmaps.util", NULL, 0x401, 23, methods, 18, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_ComExampleAndroidDisplayingbitmapsUtilImageWorker;
}

@end

void ComExampleAndroidDisplayingbitmapsUtilImageWorker_initWithComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(ComExampleAndroidDisplayingbitmapsUtilImageWorker *self, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory> bitmapFactory, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory> bitmapDrawableFactory, id<ComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory> memoryImageCacheFactory, ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *env, id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation> accessor) {
  NSObject_init(self);
  self->mFadeInBitmap_ = true;
  self->mExitTasksEarly_ = false;
  self->mPauseWork_ = false;
  JreStrongAssignAndConsume(&self->mPauseWorkLock_, new_NSObject_init());
  JreStrongAssign(&self->mBitmapFactory_, bitmapFactory);
  JreStrongAssign(&self->mBitmapDrawableFactory_, bitmapDrawableFactory);
  JreStrongAssign(&self->mMemoryImageCacheFactory_, memoryImageCacheFactory);
  JreStrongAssign(&self->mDiskEnvironment_, env);
  JreStrongAssign(&self->mThreadOperation_, accessor);
}

void ComExampleAndroidDisplayingbitmapsUtilImageWorker_cancelWorkWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> imageView) {
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_initialize();
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *bitmapWorkerTask = ComExampleAndroidDisplayingbitmapsUtilImageWorker_getBitmapWorkerTaskWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(imageView);
  if (bitmapWorkerTask != nil) {
    [bitmapWorkerTask cancelWithBoolean:true];
    {
      id bitmapData = bitmapWorkerTask->mData_;
      ComExampleAndroidCommonLoggerLog_dWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageWorker_TAG_, JreStrcat("$@", @"cancelWork - cancelled work for ", bitmapData));
    }
  }
}

jboolean ComExampleAndroidDisplayingbitmapsUtilImageWorker_cancelPotentialWorkWithId_withComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(id data, id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> imageView) {
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_initialize();
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *bitmapWorkerTask = ComExampleAndroidDisplayingbitmapsUtilImageWorker_getBitmapWorkerTaskWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(imageView);
  if (bitmapWorkerTask != nil) {
    id bitmapData = bitmapWorkerTask->mData_;
    if (bitmapData == nil || ![bitmapData isEqual:data]) {
      [bitmapWorkerTask cancelWithBoolean:true];
      {
        ComExampleAndroidCommonLoggerLog_dWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageWorker_TAG_, JreStrcat("$@", @"cancelPotentialWork - cancelled work for ", data));
      }
    }
    else {
      return false;
    }
  }
  return true;
}

ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *ComExampleAndroidDisplayingbitmapsUtilImageWorker_getBitmapWorkerTaskWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> imageView) {
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_initialize();
  if (imageView != nil) {
    return [imageView getBitmapWorkerTask];
  }
  return nil;
}

void ComExampleAndroidDisplayingbitmapsUtilImageWorker_setImageDrawableWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable_(ComExampleAndroidDisplayingbitmapsUtilImageWorker *self, id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> imageView, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable> drawable) {
  if (self->mFadeInBitmap_) {
    [((id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>) nil_chk(imageView)) setFadeInImageDrawableWithComExampleAndroidDisplayingbitmapsUtilAbstractBitmap:self->mLoadingBitmap_ withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable:drawable withInt:ComExampleAndroidDisplayingbitmapsUtilImageWorker_FADE_IN_TIME];
  }
  else {
    [((id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>) nil_chk(imageView)) setImageDrawableWithComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable:drawable];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComExampleAndroidDisplayingbitmapsUtilImageWorker)

@implementation ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilImageWorker:(ComExampleAndroidDisplayingbitmapsUtilImageWorker *)outer$
      withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation:(id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation>)accessor
                                                                   withId:(id)data
              withComExampleAndroidDisplayingbitmapsUtilAbstractImageView:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>)imageView {
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withId_withComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(self, outer$, accessor, data, imageView);
  return self;
}

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilImageWorker:(ComExampleAndroidDisplayingbitmapsUtilImageWorker *)outer$
      withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation:(id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation>)accessor
                                                                   withId:(id)data
              withComExampleAndroidDisplayingbitmapsUtilAbstractImageView:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>)imageView
withComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener:(id<ComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener>)listener {
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withId_withComExampleAndroidDisplayingbitmapsUtilAbstractImageView_withComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener_(self, outer$, accessor, data, imageView, listener);
  return self;
}

- (id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable>)doInBackgroundWithNSObjectArray:(IOSObjectArray *)params {
  {
    ComExampleAndroidCommonLoggerLog_dWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageWorker_TAG_, @"doInBackground - starting work");
  }
  NSString *dataString = NSString_valueOf_(mData_);
  id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmap> bitmap = nil;
  id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable> drawable = nil;
  @synchronized(this$0_->mPauseWorkLock_) {
    while (this$0_->mPauseWork_ && ![self isCancelled]) {
      @try {
        [nil_chk(this$0_->mPauseWorkLock_) wait];
      }
      @catch (JavaLangInterruptedException *e) {
      }
    }
  }
  if (this$0_->mImageCache_ != nil && ![self isCancelled] && ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_getAttachedImageView(self) != nil && !this$0_->mExitTasksEarly_) {
    bitmap = [this$0_->mImageCache_ getBitmapFromDiskCacheWithNSString:dataString];
  }
  if (bitmap == nil && ![self isCancelled] && ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_getAttachedImageView(self) != nil && !this$0_->mExitTasksEarly_) {
    bitmap = [this$0_ processBitmapWithId:mData_];
  }
  if (bitmap != nil) {
    drawable = [((id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory>) nil_chk(this$0_->mBitmapDrawableFactory_)) createAbstractBitmapDrawableWithComExampleAndroidDisplayingbitmapsUtilAbstractBitmap:bitmap];
    if (this$0_->mImageCache_ != nil) {
      [this$0_->mImageCache_ addBitmapToCacheWithNSString:dataString withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable:drawable];
    }
  }
  {
    ComExampleAndroidCommonLoggerLog_dWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageWorker_TAG_, @"doInBackground - finished work");
  }
  return drawable;
}

- (void)onPostExecuteWithId:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable>)value {
  jboolean success = false;
  if ([self isCancelled] || this$0_->mExitTasksEarly_) {
    value = nil;
  }
  id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> imageView = ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_getAttachedImageView(self);
  if (value != nil && imageView != nil) {
    {
      ComExampleAndroidCommonLoggerLog_dWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageWorker_TAG_, @"onPostExecute - setting bitmap");
    }
    success = true;
    ComExampleAndroidDisplayingbitmapsUtilImageWorker_setImageDrawableWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable_(this$0_, imageView, value);
  }
  if (mOnImageLoadedListener_ != nil) {
    [mOnImageLoadedListener_ onImageLoadedWithBoolean:success];
  }
}

- (void)onCancelledWithId:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawable>)value {
  [super onCancelledWithId:value];
  @synchronized(this$0_->mPauseWorkLock_) {
    [nil_chk(this$0_->mPauseWorkLock_) notifyAll];
  }
}

- (id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>)getAttachedImageView {
  return ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_getAttachedImageView(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(mData_);
  RELEASE_(mImageView_);
  RELEASE_(mOnImageLoadedListener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComExampleAndroidDisplayingbitmapsUtilImageWorker:withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation:withId:withComExampleAndroidDisplayingbitmapsUtilAbstractImageView:", "BitmapWorkerTask", NULL, 0x1, NULL, NULL },
    { "initWithComExampleAndroidDisplayingbitmapsUtilImageWorker:withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation:withId:withComExampleAndroidDisplayingbitmapsUtilAbstractImageView:withComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener:", "BitmapWorkerTask", NULL, 0x1, NULL, NULL },
    { "doInBackgroundWithNSObjectArray:", "doInBackground", "Lcom.example.android.displayingbitmaps.util.AbstractBitmapDrawable;", 0x84, NULL, NULL },
    { "onPostExecuteWithId:", "onPostExecute", "V", 0x4, NULL, NULL },
    { "onCancelledWithId:", "onCancelled", "V", 0x4, NULL, NULL },
    { "getAttachedImageView", NULL, "Lcom.example.android.displayingbitmaps.util.AbstractImageView;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.example.android.displayingbitmaps.util.ImageWorker;", NULL, NULL, .constantValue.asLong = 0 },
    { "mData_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "mImageView_", NULL, 0x12, "Lcom.example.android.displayingbitmaps.util.AbstractImageView;", NULL, NULL, .constantValue.asLong = 0 },
    { "mOnImageLoadedListener_", NULL, 0x12, "Lcom.example.android.displayingbitmaps.util.ImageWorker$OnImageLoadedListener;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.Void;", "Ljava.lang.Void;", "Lcom.example.android.displayingbitmaps.util.AbstractBitmapDrawable;"};
  static const J2ObjcClassInfo _ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask = { 2, "BitmapWorkerTask", "com.example.android.displayingbitmaps.util", "ImageWorker", 0x0, 6, methods, 4, fields, 3, superclass_type_args, 0, NULL, NULL, "Lcom/example/android/displayingbitmaps/util/AsyncTask<Ljava/lang/Void;Ljava/lang/Void;Lcom/example/android/displayingbitmaps/util/AbstractBitmapDrawable;>;" };
  return &_ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask;
}

@end

void ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withId_withComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *self, ComExampleAndroidDisplayingbitmapsUtilImageWorker *outer$, id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation> accessor, id data, id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> imageView) {
  JreStrongAssign(&self->this$0_, outer$);
  ComExampleAndroidDisplayingbitmapsUtilAsyncTask_initWithComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(self, accessor);
  JreStrongAssign(&self->mData_, data);
  JreStrongAssign(&self->mImageView_, imageView);
  JreStrongAssign(&self->mOnImageLoadedListener_, nil);
}

ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *new_ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withId_withComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(ComExampleAndroidDisplayingbitmapsUtilImageWorker *outer$, id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation> accessor, id data, id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> imageView) {
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *self = [ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask alloc];
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withId_withComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(self, outer$, accessor, data, imageView);
  return self;
}

void ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withId_withComExampleAndroidDisplayingbitmapsUtilAbstractImageView_withComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener_(ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *self, ComExampleAndroidDisplayingbitmapsUtilImageWorker *outer$, id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation> accessor, id data, id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> imageView, id<ComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener> listener) {
  JreStrongAssign(&self->this$0_, outer$);
  ComExampleAndroidDisplayingbitmapsUtilAsyncTask_initWithComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(self, accessor);
  JreStrongAssign(&self->mData_, data);
  JreStrongAssign(&self->mImageView_, imageView);
  JreStrongAssign(&self->mOnImageLoadedListener_, listener);
}

ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *new_ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withId_withComExampleAndroidDisplayingbitmapsUtilAbstractImageView_withComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener_(ComExampleAndroidDisplayingbitmapsUtilImageWorker *outer$, id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation> accessor, id data, id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> imageView, id<ComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener> listener) {
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *self = [ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask alloc];
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withId_withComExampleAndroidDisplayingbitmapsUtilAbstractImageView_withComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener_(self, outer$, accessor, data, imageView, listener);
  return self;
}

id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView> ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask_getAttachedImageView(ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *self) {
  if (![((id<ComExampleAndroidDisplayingbitmapsUtilAbstractImageView>) nil_chk(self->mImageView_)) hasOwner]) {
    return nil;
  }
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask *bitmapWorkerTask = ComExampleAndroidDisplayingbitmapsUtilImageWorker_getBitmapWorkerTaskWithComExampleAndroidDisplayingbitmapsUtilAbstractImageView_(self->mImageView_);
  if (self == bitmapWorkerTask) {
    return self->mImageView_;
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComExampleAndroidDisplayingbitmapsUtilImageWorker_BitmapWorkerTask)

@implementation ComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onImageLoadedWithBoolean:", "onImageLoaded", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener = { 2, "OnImageLoadedListener", "com.example.android.displayingbitmaps.util", "ImageWorker", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComExampleAndroidDisplayingbitmapsUtilImageWorker_OnImageLoadedListener)

@implementation ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilImageWorker:(ComExampleAndroidDisplayingbitmapsUtilImageWorker *)outer$
      withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation:(id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation>)accessor {
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(self, outer$, accessor);
  return self;
}

- (id)doInBackgroundWithNSObjectArray:(IOSObjectArray *)params {
  switch ([((JavaLangInteger *) nil_chk((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(nil_chk(params), 0), [JavaLangInteger class]))) intValue]) {
    case ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_CLEAR:
    [this$0_ clearCacheInternal];
    break;
    case ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_INIT_DISK_CACHE:
    [this$0_ initDiskCacheInternal];
    break;
    case ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_FLUSH:
    [this$0_ flushCacheInternal];
    break;
    case ComExampleAndroidDisplayingbitmapsUtilImageWorker_MESSAGE_CLOSE:
    [this$0_ closeCacheInternal];
    break;
  }
  return nil;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComExampleAndroidDisplayingbitmapsUtilImageWorker:withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation:", "CacheAsyncTask", NULL, 0x0, NULL, NULL },
    { "doInBackgroundWithNSObjectArray:", "doInBackground", "Ljava.lang.Void;", 0x84, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.example.android.displayingbitmaps.util.ImageWorker;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.Object;", "Ljava.lang.Void;", "Ljava.lang.Void;"};
  static const J2ObjcClassInfo _ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask = { 2, "CacheAsyncTask", "com.example.android.displayingbitmaps.util", "ImageWorker", 0x4, 2, methods, 1, fields, 3, superclass_type_args, 0, NULL, NULL, "Lcom/example/android/displayingbitmaps/util/AsyncTask<Ljava/lang/Object;Ljava/lang/Void;Ljava/lang/Void;>;" };
  return &_ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask;
}

@end

void ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask *self, ComExampleAndroidDisplayingbitmapsUtilImageWorker *outer$, id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation> accessor) {
  JreStrongAssign(&self->this$0_, outer$);
  ComExampleAndroidDisplayingbitmapsUtilAsyncTask_initWithComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(self, accessor);
}

ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask *new_ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(ComExampleAndroidDisplayingbitmapsUtilImageWorker *outer$, id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation> accessor) {
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask *self = [ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask alloc];
  ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask_initWithComExampleAndroidDisplayingbitmapsUtilImageWorker_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_(self, outer$, accessor);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComExampleAndroidDisplayingbitmapsUtilImageWorker_CacheAsyncTask)
