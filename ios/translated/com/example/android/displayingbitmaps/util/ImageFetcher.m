//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/Application/src/shared/java//com/example/android/displayingbitmaps/util/ImageFetcher.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/example/android/common/logger/Log.h"
#include "com/example/android/displayingbitmaps/util/AbstractBitmap.h"
#include "com/example/android/displayingbitmaps/util/AbstractBitmapDrawableFactory.h"
#include "com/example/android/displayingbitmaps/util/AbstractBitmapFactory.h"
#include "com/example/android/displayingbitmaps/util/AsyncTask.h"
#include "com/example/android/displayingbitmaps/util/DiskEnvironment.h"
#include "com/example/android/displayingbitmaps/util/DiskLruCache.h"
#include "com/example/android/displayingbitmaps/util/ImageCache.h"
#include "com/example/android/displayingbitmaps/util/ImageFetcher.h"
#include "com/example/android/displayingbitmaps/util/ImageResizer.h"
#include "com/example/android/displayingbitmaps/util/ImageWorker.h"
#include "com/example/android/displayingbitmaps/util/MemoryImageCacheFactory.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileDescriptor.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"

#define ComExampleAndroidDisplayingbitmapsUtilImageFetcher_HTTP_CACHE_SIZE 10485760
#define ComExampleAndroidDisplayingbitmapsUtilImageFetcher_IO_BUFFER_SIZE 8192
#define ComExampleAndroidDisplayingbitmapsUtilImageFetcher_DISK_CACHE_INDEX 0

@interface ComExampleAndroidDisplayingbitmapsUtilImageFetcher () {
 @public
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *mHttpDiskCache_;
  JavaIoFile *mHttpCacheDir_;
  jboolean mHttpDiskCacheStarting_;
  id mHttpDiskCacheLock_;
  id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker> mConnectionChecker_;
}

- (void)init__WithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker:(id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker>)connectionChecker
                             withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment:(ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *)diskEnvironment OBJC_METHOD_FAMILY_NONE;

- (void)initHttpDiskCache OBJC_METHOD_FAMILY_NONE;

- (id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmap>)processBitmapWithNSString:(NSString *)data;

@end

J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageFetcher, mHttpDiskCache_, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageFetcher, mHttpCacheDir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageFetcher, mHttpDiskCacheLock_, id)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilImageFetcher, mConnectionChecker_, id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker>)

static NSString *ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_ = @"ImageFetcher";
J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilImageFetcher, TAG_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilImageFetcher, HTTP_CACHE_SIZE, jint)

static NSString *ComExampleAndroidDisplayingbitmapsUtilImageFetcher_HTTP_CACHE_DIR_ = @"http";
J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilImageFetcher, HTTP_CACHE_DIR_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilImageFetcher, IO_BUFFER_SIZE, jint)

J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilImageFetcher, DISK_CACHE_INDEX, jint)

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilImageFetcher_init__WithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher *self, id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker> connectionChecker, ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *diskEnvironment);

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilImageFetcher_initHttpDiskCache(ComExampleAndroidDisplayingbitmapsUtilImageFetcher *self);

__attribute__((unused)) static id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmap> ComExampleAndroidDisplayingbitmapsUtilImageFetcher_processBitmapWithNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher *self, NSString *data);

@interface ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker : NSObject

@end

@implementation ComExampleAndroidDisplayingbitmapsUtilImageFetcher

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker:(id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker>)connectionChecker
                             withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory>)bitmapFactory
                     withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory>)bitmapDrawableFactory
                           withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory:(id<ComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory>)memoryImageCacheFactory
                                   withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment:(ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *)diskEnvironment
                         withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation:(id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation>)accessor
                                                                                     withInt:(jint)imageWidth
                                                                                     withInt:(jint)imageHeight {
  ComExampleAndroidDisplayingbitmapsUtilImageFetcher_initWithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withInt_withInt_(self, connectionChecker, bitmapFactory, bitmapDrawableFactory, memoryImageCacheFactory, diskEnvironment, accessor, imageWidth, imageHeight);
  return self;
}

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker:(id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker>)connectionChecker
                             withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory>)bitmapFactory
                     withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory:(id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory>)bitmapDrawableFactory
                           withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory:(id<ComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory>)memoryImageCacheFactory
                                   withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment:(ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *)diskEnvironment
                         withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation:(id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation>)accessor
                                                                                     withInt:(jint)imageSize {
  ComExampleAndroidDisplayingbitmapsUtilImageFetcher_initWithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withInt_(self, connectionChecker, bitmapFactory, bitmapDrawableFactory, memoryImageCacheFactory, diskEnvironment, accessor, imageSize);
  return self;
}

- (void)init__WithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker:(id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker>)connectionChecker
                             withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment:(ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *)diskEnvironment {
  ComExampleAndroidDisplayingbitmapsUtilImageFetcher_init__WithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_(self, connectionChecker, diskEnvironment);
}

- (void)initDiskCacheInternal {
  [super initDiskCacheInternal];
  ComExampleAndroidDisplayingbitmapsUtilImageFetcher_initHttpDiskCache(self);
}

- (void)initHttpDiskCache {
  ComExampleAndroidDisplayingbitmapsUtilImageFetcher_initHttpDiskCache(self);
}

- (void)clearCacheInternal {
  [super clearCacheInternal];
  @synchronized(mHttpDiskCacheLock_) {
    if (mHttpDiskCache_ != nil && ![mHttpDiskCache_ isClosed]) {
      @try {
        [mHttpDiskCache_ delete__];
        {
          ComExampleAndroidCommonLoggerLog_dWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_, @"HTTP cache cleared");
        }
      }
      @catch (JavaIoIOException *e) {
        ComExampleAndroidCommonLoggerLog_eWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_, JreStrcat("$@", @"clearCacheInternal - ", e));
      }
      JreStrongAssign(&mHttpDiskCache_, nil);
      mHttpDiskCacheStarting_ = true;
      ComExampleAndroidDisplayingbitmapsUtilImageFetcher_initHttpDiskCache(self);
    }
  }
}

- (void)flushCacheInternal {
  [super flushCacheInternal];
  @synchronized(mHttpDiskCacheLock_) {
    if (mHttpDiskCache_ != nil) {
      @try {
        [mHttpDiskCache_ flush];
        {
          ComExampleAndroidCommonLoggerLog_dWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_, @"HTTP cache flushed");
        }
      }
      @catch (JavaIoIOException *e) {
        ComExampleAndroidCommonLoggerLog_eWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_, JreStrcat("$@", @"flush - ", e));
      }
    }
  }
}

- (void)closeCacheInternal {
  [super closeCacheInternal];
  @synchronized(mHttpDiskCacheLock_) {
    if (mHttpDiskCache_ != nil) {
      @try {
        if (![mHttpDiskCache_ isClosed]) {
          [mHttpDiskCache_ close];
          JreStrongAssign(&mHttpDiskCache_, nil);
          {
            ComExampleAndroidCommonLoggerLog_dWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_, @"HTTP cache closed");
          }
        }
      }
      @catch (JavaIoIOException *e) {
        ComExampleAndroidCommonLoggerLog_eWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_, JreStrcat("$@", @"closeCacheInternal - ", e));
      }
    }
  }
}

- (id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmap>)processBitmapWithNSString:(NSString *)data {
  return ComExampleAndroidDisplayingbitmapsUtilImageFetcher_processBitmapWithNSString_(self, data);
}

- (id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmap>)processBitmapWithId:(id)data {
  return ComExampleAndroidDisplayingbitmapsUtilImageFetcher_processBitmapWithNSString_(self, NSString_valueOf_(data));
}

- (jboolean)downloadUrlToStreamWithNSString:(NSString *)urlString
                     withJavaIoOutputStream:(JavaIoOutputStream *)outputStream {
  [((id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker>) nil_chk(mConnectionChecker_)) disableConnectionReuseIfNecessary];
  JavaNetHttpURLConnection *urlConnection = nil;
  JavaIoBufferedOutputStream *out = nil;
  JavaIoBufferedInputStream *in = nil;
  @try {
    JavaNetURL *url = [new_JavaNetURL_initWithNSString_(urlString) autorelease];
    urlConnection = (JavaNetHttpURLConnection *) check_class_cast([url openConnection], [JavaNetHttpURLConnection class]);
    in = [new_JavaIoBufferedInputStream_initWithJavaIoInputStream_withInt_([((JavaNetHttpURLConnection *) nil_chk(urlConnection)) getInputStream], ComExampleAndroidDisplayingbitmapsUtilImageFetcher_IO_BUFFER_SIZE) autorelease];
    out = [new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_withInt_(outputStream, ComExampleAndroidDisplayingbitmapsUtilImageFetcher_IO_BUFFER_SIZE) autorelease];
    jint b;
    while ((b = [in read]) != -1) {
      [out writeWithInt:b];
    }
    return true;
  }
  @catch (JavaIoIOException *e) {
    ComExampleAndroidCommonLoggerLog_eWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_, JreStrcat("$@", @"Error in downloadBitmap - ", e));
  }
  @finally {
    if (urlConnection != nil) {
      [urlConnection disconnect];
    }
    @try {
      if (out != nil) {
        [out close];
      }
      if (in != nil) {
        [in close];
      }
    }
    @catch (JavaIoIOException *e) {
    }
  }
  return false;
}

- (void)dealloc {
  RELEASE_(mHttpDiskCache_);
  RELEASE_(mHttpCacheDir_);
  RELEASE_(mHttpDiskCacheLock_);
  RELEASE_(mConnectionChecker_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker:withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory:withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory:withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory:withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment:withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation:withInt:withInt:", "ImageFetcher", NULL, 0x1, NULL, NULL },
    { "initWithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker:withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory:withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory:withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory:withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment:withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation:withInt:", "ImageFetcher", NULL, 0x1, NULL, NULL },
    { "init__WithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker:withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment:", "init", "V", 0x2, NULL, NULL },
    { "initDiskCacheInternal", NULL, "V", 0x4, NULL, NULL },
    { "initHttpDiskCache", NULL, "V", 0x2, NULL, NULL },
    { "clearCacheInternal", NULL, "V", 0x4, NULL, NULL },
    { "flushCacheInternal", NULL, "V", 0x4, NULL, NULL },
    { "closeCacheInternal", NULL, "V", 0x4, NULL, NULL },
    { "processBitmapWithNSString:", "processBitmap", "Lcom.example.android.displayingbitmaps.util.AbstractBitmap;", 0x2, NULL, NULL },
    { "processBitmapWithId:", "processBitmap", "Lcom.example.android.displayingbitmaps.util.AbstractBitmap;", 0x4, NULL, NULL },
    { "downloadUrlToStreamWithNSString:withJavaIoOutputStream:", "downloadUrlToStream", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG_", NULL, 0x1a, "Ljava.lang.String;", &ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_, NULL, .constantValue.asLong = 0 },
    { "HTTP_CACHE_SIZE", "HTTP_CACHE_SIZE", 0x1a, "I", NULL, NULL, .constantValue.asInt = ComExampleAndroidDisplayingbitmapsUtilImageFetcher_HTTP_CACHE_SIZE },
    { "HTTP_CACHE_DIR_", NULL, 0x1a, "Ljava.lang.String;", &ComExampleAndroidDisplayingbitmapsUtilImageFetcher_HTTP_CACHE_DIR_, NULL, .constantValue.asLong = 0 },
    { "IO_BUFFER_SIZE", "IO_BUFFER_SIZE", 0x1a, "I", NULL, NULL, .constantValue.asInt = ComExampleAndroidDisplayingbitmapsUtilImageFetcher_IO_BUFFER_SIZE },
    { "mHttpDiskCache_", NULL, 0x2, "Lcom.example.android.displayingbitmaps.util.DiskLruCache;", NULL, NULL, .constantValue.asLong = 0 },
    { "mHttpCacheDir_", NULL, 0x2, "Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
    { "mHttpDiskCacheStarting_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mHttpDiskCacheLock_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "DISK_CACHE_INDEX", "DISK_CACHE_INDEX", 0x1a, "I", NULL, NULL, .constantValue.asInt = ComExampleAndroidDisplayingbitmapsUtilImageFetcher_DISK_CACHE_INDEX },
    { "mConnectionChecker_", NULL, 0x12, "Lcom.example.android.displayingbitmaps.util.ImageFetcher$ConnectionChecker;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.example.android.displayingbitmaps.util.ImageFetcher$ConnectionChecker;"};
  static const J2ObjcClassInfo _ComExampleAndroidDisplayingbitmapsUtilImageFetcher = { 2, "ImageFetcher", "com.example.android.displayingbitmaps.util", NULL, 0x1, 11, methods, 10, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComExampleAndroidDisplayingbitmapsUtilImageFetcher;
}

@end

void ComExampleAndroidDisplayingbitmapsUtilImageFetcher_initWithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withInt_withInt_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher *self, id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker> connectionChecker, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory> bitmapFactory, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory> bitmapDrawableFactory, id<ComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory> memoryImageCacheFactory, ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *diskEnvironment, id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation> accessor, jint imageWidth, jint imageHeight) {
  ComExampleAndroidDisplayingbitmapsUtilImageResizer_initWithComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withInt_withInt_(self, bitmapFactory, bitmapDrawableFactory, memoryImageCacheFactory, diskEnvironment, accessor, imageWidth, imageHeight);
  self->mHttpDiskCacheStarting_ = true;
  JreStrongAssignAndConsume(&self->mHttpDiskCacheLock_, new_NSObject_init());
  ComExampleAndroidDisplayingbitmapsUtilImageFetcher_init__WithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_(self, connectionChecker, diskEnvironment);
  JreStrongAssign(&self->mConnectionChecker_, connectionChecker);
}

ComExampleAndroidDisplayingbitmapsUtilImageFetcher *new_ComExampleAndroidDisplayingbitmapsUtilImageFetcher_initWithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withInt_withInt_(id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker> connectionChecker, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory> bitmapFactory, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory> bitmapDrawableFactory, id<ComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory> memoryImageCacheFactory, ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *diskEnvironment, id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation> accessor, jint imageWidth, jint imageHeight) {
  ComExampleAndroidDisplayingbitmapsUtilImageFetcher *self = [ComExampleAndroidDisplayingbitmapsUtilImageFetcher alloc];
  ComExampleAndroidDisplayingbitmapsUtilImageFetcher_initWithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withInt_withInt_(self, connectionChecker, bitmapFactory, bitmapDrawableFactory, memoryImageCacheFactory, diskEnvironment, accessor, imageWidth, imageHeight);
  return self;
}

void ComExampleAndroidDisplayingbitmapsUtilImageFetcher_initWithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withInt_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher *self, id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker> connectionChecker, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory> bitmapFactory, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory> bitmapDrawableFactory, id<ComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory> memoryImageCacheFactory, ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *diskEnvironment, id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation> accessor, jint imageSize) {
  ComExampleAndroidDisplayingbitmapsUtilImageResizer_initWithComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withInt_(self, bitmapFactory, bitmapDrawableFactory, memoryImageCacheFactory, diskEnvironment, accessor, imageSize);
  self->mHttpDiskCacheStarting_ = true;
  JreStrongAssignAndConsume(&self->mHttpDiskCacheLock_, new_NSObject_init());
  ComExampleAndroidDisplayingbitmapsUtilImageFetcher_init__WithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_(self, connectionChecker, diskEnvironment);
  JreStrongAssign(&self->mConnectionChecker_, connectionChecker);
}

ComExampleAndroidDisplayingbitmapsUtilImageFetcher *new_ComExampleAndroidDisplayingbitmapsUtilImageFetcher_initWithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withInt_(id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker> connectionChecker, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory> bitmapFactory, id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory> bitmapDrawableFactory, id<ComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory> memoryImageCacheFactory, ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *diskEnvironment, id<ComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation> accessor, jint imageSize) {
  ComExampleAndroidDisplayingbitmapsUtilImageFetcher *self = [ComExampleAndroidDisplayingbitmapsUtilImageFetcher alloc];
  ComExampleAndroidDisplayingbitmapsUtilImageFetcher_initWithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory_withComExampleAndroidDisplayingbitmapsUtilAbstractBitmapDrawableFactory_withComExampleAndroidDisplayingbitmapsUtilMemoryImageCacheFactory_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_withComExampleAndroidDisplayingbitmapsUtilAsyncTask_ThreadOperation_withInt_(self, connectionChecker, bitmapFactory, bitmapDrawableFactory, memoryImageCacheFactory, diskEnvironment, accessor, imageSize);
  return self;
}

void ComExampleAndroidDisplayingbitmapsUtilImageFetcher_init__WithComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker_withComExampleAndroidDisplayingbitmapsUtilDiskEnvironment_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher *self, id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker> connectionChecker, ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *diskEnvironment) {
  [((id<ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker>) nil_chk(connectionChecker)) checkConnection];
  JreStrongAssign(&self->mHttpCacheDir_, [((ComExampleAndroidDisplayingbitmapsUtilDiskEnvironment *) nil_chk(diskEnvironment)) getDiskCacheDirWithNSString:ComExampleAndroidDisplayingbitmapsUtilImageFetcher_HTTP_CACHE_DIR_]);
}

void ComExampleAndroidDisplayingbitmapsUtilImageFetcher_initHttpDiskCache(ComExampleAndroidDisplayingbitmapsUtilImageFetcher *self) {
  if (![((JavaIoFile *) nil_chk(self->mHttpCacheDir_)) exists]) {
    [self->mHttpCacheDir_ mkdirs];
  }
  @synchronized(self->mHttpDiskCacheLock_) {
    if ([((ComExampleAndroidDisplayingbitmapsUtilImageCache *) nil_chk([self getImageCache])) getUsableSpaceWithJavaIoFile:self->mHttpCacheDir_] > ComExampleAndroidDisplayingbitmapsUtilImageFetcher_HTTP_CACHE_SIZE) {
      @try {
        JreStrongAssign(&self->mHttpDiskCache_, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_openWithJavaIoFile_withInt_withInt_withLong_(self->mHttpCacheDir_, 1, 1, ComExampleAndroidDisplayingbitmapsUtilImageFetcher_HTTP_CACHE_SIZE));
        {
          ComExampleAndroidCommonLoggerLog_dWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_, @"HTTP cache initialized");
        }
      }
      @catch (JavaIoIOException *e) {
        JreStrongAssign(&self->mHttpDiskCache_, nil);
      }
    }
    self->mHttpDiskCacheStarting_ = false;
    [nil_chk(self->mHttpDiskCacheLock_) notifyAll];
  }
}

id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmap> ComExampleAndroidDisplayingbitmapsUtilImageFetcher_processBitmapWithNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher *self, NSString *data) {
  {
    ComExampleAndroidCommonLoggerLog_dWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_, JreStrcat("$$", @"processBitmap - ", data));
  }
  NSString *key = ComExampleAndroidDisplayingbitmapsUtilImageCache_hashKeyForDiskWithNSString_(data);
  JavaIoFileDescriptor *fileDescriptor = nil;
  JavaIoFileInputStream *fileInputStream = nil;
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot *snapshot;
  @synchronized(self->mHttpDiskCacheLock_) {
    while (self->mHttpDiskCacheStarting_) {
      @try {
        [nil_chk(self->mHttpDiskCacheLock_) wait];
      }
      @catch (JavaLangInterruptedException *e) {
      }
    }
    if (self->mHttpDiskCache_ != nil) {
      @try {
        snapshot = [self->mHttpDiskCache_ getWithNSString:key];
        if (snapshot == nil) {
          {
            ComExampleAndroidCommonLoggerLog_dWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_, @"processBitmap, not found in http cache, downloading...");
          }
          ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *editor = [self->mHttpDiskCache_ editWithNSString:key];
          if (editor != nil) {
            if ([self downloadUrlToStreamWithNSString:data withJavaIoOutputStream:[editor newOutputStreamWithInt:ComExampleAndroidDisplayingbitmapsUtilImageFetcher_DISK_CACHE_INDEX]]) {
              [editor commit];
            }
            else {
              [editor abort];
            }
          }
          snapshot = [self->mHttpDiskCache_ getWithNSString:key];
        }
        if (snapshot != nil) {
          fileInputStream = (JavaIoFileInputStream *) check_class_cast([snapshot getInputStreamWithInt:ComExampleAndroidDisplayingbitmapsUtilImageFetcher_DISK_CACHE_INDEX], [JavaIoFileInputStream class]);
          fileDescriptor = [((JavaIoFileInputStream *) nil_chk(fileInputStream)) getFD];
        }
      }
      @catch (JavaIoIOException *e) {
        ComExampleAndroidCommonLoggerLog_eWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_, JreStrcat("$@", @"processBitmap - ", e));
      }
      @catch (JavaLangIllegalStateException *e) {
        ComExampleAndroidCommonLoggerLog_eWithNSString_withNSString_(ComExampleAndroidDisplayingbitmapsUtilImageFetcher_TAG_, JreStrcat("$@", @"processBitmap - ", e));
      }
      @finally {
        if (fileDescriptor == nil && fileInputStream != nil) {
          @try {
            [fileInputStream close];
          }
          @catch (JavaIoIOException *e) {
          }
        }
      }
    }
  }
  id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmap> bitmap = nil;
  if (fileDescriptor != nil) {
    bitmap = [((id<ComExampleAndroidDisplayingbitmapsUtilAbstractBitmapFactory>) nil_chk(self->mBitmapFactory_)) decodeSampledBitmapFromDescriptorWithJavaIoFileDescriptor:fileDescriptor withInt:self->mImageWidth_ withInt:self->mImageHeight_ withComExampleAndroidDisplayingbitmapsUtilImageCache:[self getImageCache]];
  }
  if (fileInputStream != nil) {
    @try {
      [fileInputStream close];
    }
    @catch (JavaIoIOException *e) {
    }
  }
  return bitmap;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComExampleAndroidDisplayingbitmapsUtilImageFetcher)

@implementation ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkConnection", NULL, "V", 0x401, NULL, NULL },
    { "disableConnectionReuseIfNecessary", NULL, "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker = { 2, "ConnectionChecker", "com.example.android.displayingbitmaps.util", "ImageFetcher", 0x608, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComExampleAndroidDisplayingbitmapsUtilImageFetcher_ConnectionChecker)
