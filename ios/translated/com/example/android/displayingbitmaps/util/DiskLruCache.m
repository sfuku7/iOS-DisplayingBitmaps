//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/Application/src/shared/java//com/example/android/displayingbitmaps/util/DiskLruCache.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/example/android/displayingbitmaps/util/DiskLruCache.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedWriter.h"
#include "java/io/Closeable.h"
#include "java/io/EOFException.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/FileWriter.h"
#include "java/io/FilterOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/Reader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Void.h"
#include "java/lang/reflect/Array.h"
#include "java/nio/charset/Charset.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"

@class ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry;

#define ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_IO_BUFFER_SIZE 8192

@interface ComExampleAndroidDisplayingbitmapsUtilDiskLruCache () {
 @public
  JavaIoFile *directory_;
  JavaIoFile *journalFile_;
  JavaIoFile *journalFileTmp_;
  jint appVersion_;
  jlong maxSize_;
  jint valueCount_;
  jlong size_;
  JavaIoWriter *journalWriter_;
  JavaUtilLinkedHashMap *lruEntries_;
  jint redundantOpCount_;
  jlong nextSequenceNumber_;
  id<JavaUtilConcurrentExecutorService> executorService_;
  id<JavaUtilConcurrentCallable> cleanupCallable_;
}

+ (IOSObjectArray *)copyOfRangeWithNSObjectArray:(IOSObjectArray *)original
                                         withInt:(jint)start
                                         withInt:(jint)end OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithJavaIoFile:(JavaIoFile *)directory
                           withInt:(jint)appVersion
                           withInt:(jint)valueCount
                          withLong:(jlong)maxSize;

- (void)readJournal;

- (void)readJournalLineWithNSString:(NSString *)line;

- (void)processJournal;

- (void)rebuildJournal;

+ (void)deleteIfExistsWithJavaIoFile:(JavaIoFile *)file;

- (ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *)editWithNSString:(NSString *)key
                                                                       withLong:(jlong)expectedSequenceNumber;

- (void)completeEditWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *)editor
                                                                      withBoolean:(jboolean)success;

- (jboolean)journalRebuildRequired;

- (void)checkNotClosed;

- (void)trimToSize;

- (void)validateKeyWithNSString:(NSString *)key;

+ (NSString *)inputStreamToStringWithJavaIoInputStream:(JavaIoInputStream *)inArg;

@end

J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, directory_, JavaIoFile *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, journalFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, journalFileTmp_, JavaIoFile *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, journalWriter_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, lruEntries_, JavaUtilLinkedHashMap *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, executorService_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, cleanupCallable_, id<JavaUtilConcurrentCallable>)

static NSString *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_CLEAN_ = @"CLEAN";
J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, CLEAN_, NSString *)

static NSString *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_DIRTY_ = @"DIRTY";
J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, DIRTY_, NSString *)

static NSString *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_REMOVE_ = @"REMOVE";
J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, REMOVE_, NSString *)

static NSString *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_READ_ = @"READ";
J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, READ_, NSString *)

static JavaNioCharsetCharset *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_UTF_8_;
J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, UTF_8_, JavaNioCharsetCharset *)

J2OBJC_STATIC_FIELD_GETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, IO_BUFFER_SIZE, jint)

__attribute__((unused)) static IOSObjectArray *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_copyOfRangeWithNSObjectArray_withInt_withInt_(IOSObjectArray *original, jint start, jint end);

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self, JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize);

__attribute__((unused)) static ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize) NS_RETURNS_RETAINED;

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readJournal(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self);

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readJournalLineWithNSString_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self, NSString *line);

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_processJournal(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self);

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_rebuildJournal(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self);

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_deleteIfExistsWithJavaIoFile_(JavaIoFile *file);

__attribute__((unused)) static ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_editWithNSString_withLong_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self, NSString *key, jlong expectedSequenceNumber);

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_completeEditWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_withBoolean_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *editor, jboolean success);

__attribute__((unused)) static jboolean ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_journalRebuildRequired(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self);

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_checkNotClosed(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self);

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_trimToSize(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self);

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_validateKeyWithNSString_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self, NSString *key);

__attribute__((unused)) static NSString *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_inputStreamToStringWithJavaIoInputStream_(JavaIoInputStream *inArg);

@interface ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot () {
 @public
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *this$0_;
  NSString *key_;
  jlong sequenceNumber_;
  IOSObjectArray *ins_;
}

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)outer$
                                                              withNSString:(NSString *)key
                                                                  withLong:(jlong)sequenceNumber
                                                withJavaIoInputStreamArray:(IOSObjectArray *)ins;

@end

J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot, this$0_, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot, key_, NSString *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot, ins_, IOSObjectArray *)

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot *self, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *ins);

__attribute__((unused)) static ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot *new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *ins) NS_RETURNS_RETAINED;

@interface ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor () {
 @public
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *this$0_;
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *entry__;
  jboolean hasErrors_;
}

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)outer$
              withComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *)entry_;

@end

J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor, this$0_, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor, entry__, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *)

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *self, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *entry_);

__attribute__((unused)) static ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *entry_) NS_RETURNS_RETAINED;

@interface ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream : JavaIoFilterOutputStream {
 @public
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *this$0_;
}

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *)outer$
                                                           withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (void)writeWithInt:(jint)oneByte;

- (void)writeWithByteArray:(IOSByteArray *)buffer
                   withInt:(jint)offset
                   withInt:(jint)length;

- (void)close;

- (void)flush;

@end

J2OBJC_EMPTY_STATIC_INIT(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream)

J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream, this$0_, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *)

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_withJavaIoOutputStream_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream *self, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *outer$, JavaIoOutputStream *outArg);

__attribute__((unused)) static ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream *new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_withJavaIoOutputStream_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *outer$, JavaIoOutputStream *outArg) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream)

@interface ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry : NSObject {
 @public
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *this$0_;
  NSString *key_;
  IOSLongArray *lengths_;
  jboolean readable_;
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *currentEditor_;
  jlong sequenceNumber_;
}

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)outer$
                                                              withNSString:(NSString *)key;

- (NSString *)getLengths;

- (void)setLengthsWithNSStringArray:(IOSObjectArray *)strings;

- (JavaIoIOException *)invalidLengthsWithNSStringArray:(IOSObjectArray *)strings;

- (JavaIoFile *)getCleanFileWithInt:(jint)i;

- (JavaIoFile *)getDirtyFileWithInt:(jint)i;

@end

J2OBJC_EMPTY_STATIC_INIT(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry)

J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry, this$0_, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry, key_, NSString *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry, lengths_, IOSLongArray *)
J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry, currentEditor_, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *)

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *self, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$, NSString *key);

__attribute__((unused)) static ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$, NSString *key) NS_RETURNS_RETAINED;

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_setLengthsWithNSStringArray_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *self, IOSObjectArray *strings);

__attribute__((unused)) static JavaIoIOException *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_invalidLengthsWithNSStringArray_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *self, IOSObjectArray *strings);

J2OBJC_TYPE_LITERAL_HEADER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry)

@interface ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1 : NSObject < JavaUtilConcurrentCallable > {
 @public
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *this$0_;
}

- (id)call;

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1)

J2OBJC_FIELD_SETTER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1, this$0_, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)

__attribute__((unused)) static void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1 *self, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$);

__attribute__((unused)) static ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1 *new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1)

J2OBJC_INITIALIZED_DEFN(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache)

NSString *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_JOURNAL_FILE_ = @"journal";
NSString *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_JOURNAL_FILE_TMP_ = @"journal.tmp";
NSString *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_MAGIC_ = @"libcore.io.DiskLruCache";
NSString *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_VERSION_1_ = @"1";

@implementation ComExampleAndroidDisplayingbitmapsUtilDiskLruCache

+ (IOSObjectArray *)copyOfRangeWithNSObjectArray:(IOSObjectArray *)original
                                         withInt:(jint)start
                                         withInt:(jint)end {
  return ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_copyOfRangeWithNSObjectArray_withInt_withInt_(original, start, end);
}

+ (NSString *)readFullyWithJavaIoReader:(JavaIoReader *)reader {
  return ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readFullyWithJavaIoReader_(reader);
}

+ (NSString *)readAsciiLineWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readAsciiLineWithJavaIoInputStream_(inArg);
}

+ (void)closeQuietlyWithJavaIoCloseable:(id<JavaIoCloseable>)closeable {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_closeQuietlyWithJavaIoCloseable_(closeable);
}

+ (void)deleteContentsWithJavaIoFile:(JavaIoFile *)dir {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_deleteContentsWithJavaIoFile_(dir);
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)directory
                           withInt:(jint)appVersion
                           withInt:(jint)valueCount
                          withLong:(jlong)maxSize {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(self, directory, appVersion, valueCount, maxSize);
  return self;
}

+ (ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)openWithJavaIoFile:(JavaIoFile *)directory
                                                                   withInt:(jint)appVersion
                                                                   withInt:(jint)valueCount
                                                                  withLong:(jlong)maxSize {
  return ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_openWithJavaIoFile_withInt_withInt_withLong_(directory, appVersion, valueCount, maxSize);
}

- (void)readJournal {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readJournal(self);
}

- (void)readJournalLineWithNSString:(NSString *)line {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readJournalLineWithNSString_(self, line);
}

- (void)processJournal {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_processJournal(self);
}

- (void)rebuildJournal {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_rebuildJournal(self);
}

+ (void)deleteIfExistsWithJavaIoFile:(JavaIoFile *)file {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_deleteIfExistsWithJavaIoFile_(file);
}

- (ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot *)getWithNSString:(NSString *)key {
  @synchronized(self) {
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_checkNotClosed(self);
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_validateKeyWithNSString_(self, key);
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) getWithId:key];
    if (entry_ == nil) {
      return nil;
    }
    if (!((ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *) nil_chk(entry_))->readable_) {
      return nil;
    }
    IOSObjectArray *ins = [IOSObjectArray arrayWithLength:valueCount_ type:JavaIoInputStream_class_()];
    @try {
      for (jint i = 0; i < valueCount_; i++) {
        IOSObjectArray_SetAndConsume(ins, i, new_JavaIoFileInputStream_initWithJavaIoFile_([entry_ getCleanFileWithInt:i]));
      }
    }
    @catch (JavaIoFileNotFoundException *e) {
      return nil;
    }
    redundantOpCount_++;
    [((JavaIoWriter *) nil_chk(journalWriter_)) appendWithJavaLangCharSequence:JreStrcat("$C$C", ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_READ_, ' ', key, 0x000a)];
    if (ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_journalRebuildRequired(self)) {
      [((id<JavaUtilConcurrentExecutorService>) nil_chk(executorService_)) submitWithJavaUtilConcurrentCallable:cleanupCallable_];
    }
    return [new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(self, key, entry_->sequenceNumber_, ins) autorelease];
  }
}

- (ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *)editWithNSString:(NSString *)key {
  return ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_editWithNSString_withLong_(self, key, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_ANY_SEQUENCE_NUMBER);
}

- (ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *)editWithNSString:(NSString *)key
                                                                       withLong:(jlong)expectedSequenceNumber {
  return ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_editWithNSString_withLong_(self, key, expectedSequenceNumber);
}

- (JavaIoFile *)getDirectory {
  return directory_;
}

- (jlong)maxSize {
  return maxSize_;
}

- (jlong)size {
  @synchronized(self) {
    return size_;
  }
}

- (void)completeEditWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *)editor
                                                                      withBoolean:(jboolean)success {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_completeEditWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_withBoolean_(self, editor, success);
}

- (jboolean)journalRebuildRequired {
  return ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_journalRebuildRequired(self);
}

- (jboolean)removeWithNSString:(NSString *)key {
  @synchronized(self) {
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_checkNotClosed(self);
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_validateKeyWithNSString_(self, key);
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) getWithId:key];
    if (entry_ == nil || entry_->currentEditor_ != nil) {
      return false;
    }
    for (jint i = 0; i < valueCount_; i++) {
      JavaIoFile *file = [((ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *) nil_chk(entry_)) getCleanFileWithInt:i];
      if (![((JavaIoFile *) nil_chk(file)) delete__]) {
        @throw [new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"failed to delete ", file)) autorelease];
      }
      size_ -= IOSLongArray_Get(nil_chk(entry_->lengths_), i);
      *IOSLongArray_GetRef(entry_->lengths_, i) = 0;
    }
    redundantOpCount_++;
    [((JavaIoWriter *) nil_chk(journalWriter_)) appendWithJavaLangCharSequence:JreStrcat("$C$C", ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_REMOVE_, ' ', key, 0x000a)];
    [lruEntries_ removeWithId:key];
    if (ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_journalRebuildRequired(self)) {
      [((id<JavaUtilConcurrentExecutorService>) nil_chk(executorService_)) submitWithJavaUtilConcurrentCallable:cleanupCallable_];
    }
    return true;
  }
}

- (jboolean)isClosed {
  return journalWriter_ == nil;
}

- (void)checkNotClosed {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_checkNotClosed(self);
}

- (void)flush {
  @synchronized(self) {
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_checkNotClosed(self);
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_trimToSize(self);
    [((JavaIoWriter *) nil_chk(journalWriter_)) flush];
  }
}

- (void)close {
  @synchronized(self) {
    if (journalWriter_ == nil) {
      return;
    }
    for (ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry * __strong entry_ in [new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) values]) autorelease]) {
      if (((ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != nil) {
        [entry_->currentEditor_ abort];
      }
    }
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_trimToSize(self);
    [((JavaIoWriter *) nil_chk(journalWriter_)) close];
    JreStrongAssign(&journalWriter_, nil);
  }
}

- (void)trimToSize {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_trimToSize(self);
}

- (void)delete__ {
  [self close];
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_deleteContentsWithJavaIoFile_(directory_);
}

- (void)validateKeyWithNSString:(NSString *)key {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_validateKeyWithNSString_(self, key);
}

+ (NSString *)inputStreamToStringWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_inputStreamToStringWithJavaIoInputStream_(inArg);
}

- (void)dealloc {
  RELEASE_(directory_);
  RELEASE_(journalFile_);
  RELEASE_(journalFileTmp_);
  RELEASE_(journalWriter_);
  RELEASE_(lruEntries_);
  RELEASE_(executorService_);
  RELEASE_(cleanupCallable_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [ComExampleAndroidDisplayingbitmapsUtilDiskLruCache class]) {
    JreStrongAssign(&ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_UTF_8_, JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8"));
    J2OBJC_SET_INITIALIZED(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "copyOfRangeWithNSObjectArray:withInt:withInt:", "copyOfRange", "[Ljava.lang.Object;", 0xa, NULL, "<T:Ljava/lang/Object;>([TT;II)[TT;" },
    { "readFullyWithJavaIoReader:", "readFully", "Ljava.lang.String;", 0x9, "Ljava.io.IOException;", NULL },
    { "readAsciiLineWithJavaIoInputStream:", "readAsciiLine", "Ljava.lang.String;", 0x9, "Ljava.io.IOException;", NULL },
    { "closeQuietlyWithJavaIoCloseable:", "closeQuietly", "V", 0x9, NULL, NULL },
    { "deleteContentsWithJavaIoFile:", "deleteContents", "V", 0x9, "Ljava.io.IOException;", NULL },
    { "initWithJavaIoFile:withInt:withInt:withLong:", "DiskLruCache", NULL, 0x2, NULL, NULL },
    { "openWithJavaIoFile:withInt:withInt:withLong:", "open", "Lcom.example.android.displayingbitmaps.util.DiskLruCache;", 0x9, "Ljava.io.IOException;", NULL },
    { "readJournal", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readJournalLineWithNSString:", "readJournalLine", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "processJournal", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "rebuildJournal", NULL, "V", 0x22, "Ljava.io.IOException;", NULL },
    { "deleteIfExistsWithJavaIoFile:", "deleteIfExists", "V", 0xa, "Ljava.io.IOException;", NULL },
    { "getWithNSString:", "get", "Lcom.example.android.displayingbitmaps.util.DiskLruCache$Snapshot;", 0x21, "Ljava.io.IOException;", NULL },
    { "editWithNSString:", "edit", "Lcom.example.android.displayingbitmaps.util.DiskLruCache$Editor;", 0x1, "Ljava.io.IOException;", NULL },
    { "editWithNSString:withLong:", "edit", "Lcom.example.android.displayingbitmaps.util.DiskLruCache$Editor;", 0x22, "Ljava.io.IOException;", NULL },
    { "getDirectory", NULL, "Ljava.io.File;", 0x1, NULL, NULL },
    { "maxSize", NULL, "J", 0x1, NULL, NULL },
    { "size", NULL, "J", 0x21, NULL, NULL },
    { "completeEditWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor:withBoolean:", "completeEdit", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "journalRebuildRequired", NULL, "Z", 0x2, NULL, NULL },
    { "removeWithNSString:", "remove", "Z", 0x21, "Ljava.io.IOException;", NULL },
    { "isClosed", NULL, "Z", 0x1, NULL, NULL },
    { "checkNotClosed", NULL, "V", 0x2, NULL, NULL },
    { "flush", NULL, "V", 0x21, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x21, "Ljava.io.IOException;", NULL },
    { "trimToSize", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "delete__", "delete", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "validateKeyWithNSString:", "validateKey", "V", 0x2, NULL, NULL },
    { "inputStreamToStringWithJavaIoInputStream:", "inputStreamToString", "Ljava.lang.String;", 0xa, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "JOURNAL_FILE_", NULL, 0x18, "Ljava.lang.String;", &ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_JOURNAL_FILE_, NULL, .constantValue.asLong = 0 },
    { "JOURNAL_FILE_TMP_", NULL, 0x18, "Ljava.lang.String;", &ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_JOURNAL_FILE_TMP_, NULL, .constantValue.asLong = 0 },
    { "MAGIC_", NULL, 0x18, "Ljava.lang.String;", &ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_MAGIC_, NULL, .constantValue.asLong = 0 },
    { "VERSION_1_", NULL, 0x18, "Ljava.lang.String;", &ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_VERSION_1_, NULL, .constantValue.asLong = 0 },
    { "ANY_SEQUENCE_NUMBER", "ANY_SEQUENCE_NUMBER", 0x18, "J", NULL, NULL, .constantValue.asLong = ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_ANY_SEQUENCE_NUMBER },
    { "CLEAN_", NULL, 0x1a, "Ljava.lang.String;", &ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_CLEAN_, NULL, .constantValue.asLong = 0 },
    { "DIRTY_", NULL, 0x1a, "Ljava.lang.String;", &ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_DIRTY_, NULL, .constantValue.asLong = 0 },
    { "REMOVE_", NULL, 0x1a, "Ljava.lang.String;", &ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_REMOVE_, NULL, .constantValue.asLong = 0 },
    { "READ_", NULL, 0x1a, "Ljava.lang.String;", &ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_READ_, NULL, .constantValue.asLong = 0 },
    { "UTF_8_", NULL, 0x1a, "Ljava.nio.charset.Charset;", &ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_UTF_8_, NULL, .constantValue.asLong = 0 },
    { "IO_BUFFER_SIZE", "IO_BUFFER_SIZE", 0x1a, "I", NULL, NULL, .constantValue.asInt = ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_IO_BUFFER_SIZE },
    { "directory_", NULL, 0x12, "Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
    { "journalFile_", NULL, 0x12, "Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
    { "journalFileTmp_", NULL, 0x12, "Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
    { "appVersion_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "maxSize_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "valueCount_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "size_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "journalWriter_", NULL, 0x2, "Ljava.io.Writer;", NULL, NULL, .constantValue.asLong = 0 },
    { "lruEntries_", NULL, 0x12, "Ljava.util.LinkedHashMap;", NULL, "Ljava/util/LinkedHashMap<Ljava/lang/String;Lcom/example/android/displayingbitmaps/util/DiskLruCache$Entry;>;", .constantValue.asLong = 0 },
    { "redundantOpCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "nextSequenceNumber_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "executorService_", NULL, 0x12, "Ljava.util.concurrent.ExecutorService;", NULL, NULL, .constantValue.asLong = 0 },
    { "cleanupCallable_", NULL, 0x12, "Ljava.util.concurrent.Callable;", NULL, "Ljava/util/concurrent/Callable<Ljava/lang/Void;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.example.android.displayingbitmaps.util.DiskLruCache$Snapshot;", "Lcom.example.android.displayingbitmaps.util.DiskLruCache$Editor;", "Lcom.example.android.displayingbitmaps.util.DiskLruCache$Entry;"};
  static const J2ObjcClassInfo _ComExampleAndroidDisplayingbitmapsUtilDiskLruCache = { 2, "DiskLruCache", "com.example.android.displayingbitmaps.util", NULL, 0x11, 29, methods, 24, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache;
}

@end

IOSObjectArray *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_copyOfRangeWithNSObjectArray_withInt_withInt_(IOSObjectArray *original, jint start, jint end) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initialize();
  jint originalLength = ((IOSObjectArray *) nil_chk(original))->size_;
  if (start > end) {
    @throw [new_JavaLangIllegalArgumentException_init() autorelease];
  }
  if (start < 0 || start > originalLength) {
    @throw [new_JavaLangArrayIndexOutOfBoundsException_init() autorelease];
  }
  jint resultLength = end - start;
  jint copyLength = JavaLangMath_minWithInt_withInt_(resultLength, originalLength - start);
  IOSObjectArray *result = (IOSObjectArray *) check_class_cast(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[original getClass] getComponentType], resultLength), [IOSObjectArray class]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(original, start, result, 0, copyLength);
  return result;
}

NSString *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readFullyWithJavaIoReader_(JavaIoReader *reader) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initialize();
  @try {
    JavaIoStringWriter *writer = [new_JavaIoStringWriter_init() autorelease];
    IOSCharArray *buffer = [IOSCharArray arrayWithLength:1024];
    jint count;
    while ((count = [((JavaIoReader *) nil_chk(reader)) readWithCharArray:buffer]) != -1) {
      [writer writeWithCharArray:buffer withInt:0 withInt:count];
    }
    return [writer description];
  }
  @finally {
    [((JavaIoReader *) nil_chk(reader)) close];
  }
}

NSString *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readAsciiLineWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initialize();
  JavaLangStringBuilder *result = [new_JavaLangStringBuilder_initWithInt_(80) autorelease];
  while (true) {
    jint c = [((JavaIoInputStream *) nil_chk(inArg)) read];
    if (c == -1) {
      @throw [new_JavaIoEOFException_init() autorelease];
    }
    else if (c == 0x000a) {
      break;
    }
    [result appendWithChar:(jchar) c];
  }
  jint length = [result length];
  if (length > 0 && [result charAtWithInt:length - 1] == 0x000d) {
    [result setLengthWithInt:length - 1];
  }
  return [result description];
}

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_closeQuietlyWithJavaIoCloseable_(id<JavaIoCloseable> closeable) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initialize();
  if (closeable != nil) {
    @try {
      [closeable close];
    }
    @catch (JavaLangRuntimeException *rethrown) {
      @throw rethrown;
    }
    @catch (JavaLangException *ignored) {
    }
  }
}

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_deleteContentsWithJavaIoFile_(JavaIoFile *dir) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initialize();
  IOSObjectArray *files = [((JavaIoFile *) nil_chk(dir)) listFiles];
  if (files == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"not a directory: ", dir)) autorelease];
  }
  {
    IOSObjectArray *a__ = files;
    JavaIoFile * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *file = *b__++;
      if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
        ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_deleteContentsWithJavaIoFile_(file);
      }
      if (![file delete__]) {
        @throw [new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"failed to delete file: ", file)) autorelease];
      }
    }
  }
}

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self, JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize) {
  NSObject_init(self);
  self->size_ = 0;
  JreStrongAssignAndConsume(&self->lruEntries_, new_JavaUtilLinkedHashMap_initWithInt_withFloat_withBoolean_(0, 0.75f, true));
  self->nextSequenceNumber_ = 0;
  JreStrongAssignAndConsume(&self->executorService_, new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnitEnum_withJavaUtilConcurrentBlockingQueue_(0, 1, 60LL, JreLoadStatic(JavaUtilConcurrentTimeUnitEnum, SECONDS), [new_JavaUtilConcurrentLinkedBlockingQueue_init() autorelease]));
  JreStrongAssignAndConsume(&self->cleanupCallable_, new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_(self));
  JreStrongAssign(&self->directory_, directory);
  self->appVersion_ = appVersion;
  JreStrongAssignAndConsume(&self->journalFile_, new_JavaIoFile_initWithJavaIoFile_withNSString_(directory, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_JOURNAL_FILE_));
  JreStrongAssignAndConsume(&self->journalFileTmp_, new_JavaIoFile_initWithJavaIoFile_withNSString_(directory, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_JOURNAL_FILE_TMP_));
  self->valueCount_ = valueCount;
  self->maxSize_ = maxSize;
}

ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self = [ComExampleAndroidDisplayingbitmapsUtilDiskLruCache alloc];
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(self, directory, appVersion, valueCount, maxSize);
  return self;
}

ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_openWithJavaIoFile_withInt_withInt_withLong_(JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initialize();
  if (maxSize <= 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"maxSize <= 0") autorelease];
  }
  if (valueCount <= 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"valueCount <= 0") autorelease];
  }
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *cache = [new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(directory, appVersion, valueCount, maxSize) autorelease];
  if ([((JavaIoFile *) nil_chk(cache->journalFile_)) exists]) {
    @try {
      ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readJournal(cache);
      ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_processJournal(cache);
      JreStrongAssignAndConsume(&cache->journalWriter_, new_JavaIoBufferedWriter_initWithJavaIoWriter_withInt_([new_JavaIoFileWriter_initWithJavaIoFile_withBoolean_(cache->journalFile_, true) autorelease], ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_IO_BUFFER_SIZE));
      return cache;
    }
    @catch (JavaIoIOException *journalIsCorrupt) {
      [cache delete__];
    }
  }
  [((JavaIoFile *) nil_chk(directory)) mkdirs];
  cache = [new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(directory, appVersion, valueCount, maxSize) autorelease];
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_rebuildJournal(cache);
  return cache;
}

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readJournal(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self) {
  JavaIoInputStream *in = [new_JavaIoBufferedInputStream_initWithJavaIoInputStream_withInt_([new_JavaIoFileInputStream_initWithJavaIoFile_(self->journalFile_) autorelease], ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_IO_BUFFER_SIZE) autorelease];
  @try {
    NSString *magic = ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readAsciiLineWithJavaIoInputStream_(in);
    NSString *version_ = ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readAsciiLineWithJavaIoInputStream_(in);
    NSString *appVersionString = ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readAsciiLineWithJavaIoInputStream_(in);
    NSString *valueCountString = ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readAsciiLineWithJavaIoInputStream_(in);
    NSString *blank = ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readAsciiLineWithJavaIoInputStream_(in);
    if (![((NSString *) nil_chk(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_MAGIC_)) isEqual:magic] || ![((NSString *) nil_chk(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_VERSION_1_)) isEqual:version_] || ![((NSString *) nil_chk(JavaLangInteger_toStringWithInt_(self->appVersion_))) isEqual:appVersionString] || ![((NSString *) nil_chk(JavaLangInteger_toStringWithInt_(self->valueCount_))) isEqual:valueCountString] || ![@"" isEqual:blank]) {
      @throw [new_JavaIoIOException_initWithNSString_(JreStrcat("$$$$$$$$C", @"unexpected journal header: [", magic, @", ", version_, @", ", valueCountString, @", ", blank, ']')) autorelease];
    }
    while (true) {
      @try {
        ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readJournalLineWithNSString_(self, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readAsciiLineWithJavaIoInputStream_(in));
      }
      @catch (JavaIoEOFException *endOfJournal) {
        break;
      }
    }
  }
  @finally {
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_closeQuietlyWithJavaIoCloseable_(in);
  }
}

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readJournalLineWithNSString_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self, NSString *line) {
  IOSObjectArray *parts = [((NSString *) nil_chk(line)) split:@" "];
  if (((IOSObjectArray *) nil_chk(parts))->size_ < 2) {
    @throw [new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"unexpected journal line: ", line)) autorelease];
  }
  NSString *key = IOSObjectArray_Get(parts, 1);
  if ([((NSString *) nil_chk(IOSObjectArray_Get(parts, 0))) isEqual:ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_REMOVE_] && parts->size_ == 2) {
    [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) removeWithId:key];
    return;
  }
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) getWithId:key];
  if (entry_ == nil) {
    entry_ = [new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_(self, key) autorelease];
    [self->lruEntries_ putWithId:key withId:entry_];
  }
  if ([((NSString *) nil_chk(IOSObjectArray_Get(parts, 0))) isEqual:ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_CLEAN_] && parts->size_ == 2 + self->valueCount_) {
    ((ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *) nil_chk(entry_))->readable_ = true;
    JreStrongAssign(&entry_->currentEditor_, nil);
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_setLengthsWithNSStringArray_(entry_, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_copyOfRangeWithNSObjectArray_withInt_withInt_(parts, 2, parts->size_));
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(parts, 0))) isEqual:ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_DIRTY_] && parts->size_ == 2) {
    JreStrongAssignAndConsume(&((ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_, new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_(self, entry_));
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(parts, 0))) isEqual:ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_READ_] && parts->size_ == 2) {
  }
  else {
    @throw [new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"unexpected journal line: ", line)) autorelease];
  }
}

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_processJournal(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_deleteIfExistsWithJavaIoFile_(self->journalFileTmp_);
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *entry_ = [i next];
    if (((ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ == nil) {
      for (jint t = 0; t < self->valueCount_; t++) {
        self->size_ += IOSLongArray_Get(nil_chk(entry_->lengths_), t);
      }
    }
    else {
      JreStrongAssign(&entry_->currentEditor_, nil);
      for (jint t = 0; t < self->valueCount_; t++) {
        ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_deleteIfExistsWithJavaIoFile_([entry_ getCleanFileWithInt:t]);
        ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_deleteIfExistsWithJavaIoFile_([entry_ getDirtyFileWithInt:t]);
      }
      [i remove];
    }
  }
}

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_rebuildJournal(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self) {
  @synchronized(self) {
    if (self->journalWriter_ != nil) {
      [self->journalWriter_ close];
    }
    JavaIoWriter *writer = [new_JavaIoBufferedWriter_initWithJavaIoWriter_withInt_([new_JavaIoFileWriter_initWithJavaIoFile_(self->journalFileTmp_) autorelease], ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_IO_BUFFER_SIZE) autorelease];
    [writer writeWithNSString:ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_MAGIC_];
    [writer writeWithNSString:@"\n"];
    [writer writeWithNSString:ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_VERSION_1_];
    [writer writeWithNSString:@"\n"];
    [writer writeWithNSString:JavaLangInteger_toStringWithInt_(self->appVersion_)];
    [writer writeWithNSString:@"\n"];
    [writer writeWithNSString:JavaLangInteger_toStringWithInt_(self->valueCount_)];
    [writer writeWithNSString:@"\n"];
    [writer writeWithNSString:@"\n"];
    for (ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry * __strong entry_ in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) values])) {
      if (((ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != nil) {
        [writer writeWithNSString:JreStrcat("$C$C", ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_DIRTY_, ' ', entry_->key_, 0x000a)];
      }
      else {
        [writer writeWithNSString:JreStrcat("$C$$C", ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_CLEAN_, ' ', entry_->key_, [entry_ getLengths], 0x000a)];
      }
    }
    [writer close];
    [((JavaIoFile *) nil_chk(self->journalFileTmp_)) renameToWithJavaIoFile:self->journalFile_];
    JreStrongAssignAndConsume(&self->journalWriter_, new_JavaIoBufferedWriter_initWithJavaIoWriter_withInt_([new_JavaIoFileWriter_initWithJavaIoFile_withBoolean_(self->journalFile_, true) autorelease], ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_IO_BUFFER_SIZE));
  }
}

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_deleteIfExistsWithJavaIoFile_(JavaIoFile *file) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initialize();
  if ([((JavaIoFile *) nil_chk(file)) exists] && ![file delete__]) {
    @throw [new_JavaIoIOException_init() autorelease];
  }
}

ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_editWithNSString_withLong_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self, NSString *key, jlong expectedSequenceNumber) {
  @synchronized(self) {
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_checkNotClosed(self);
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_validateKeyWithNSString_(self, key);
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) getWithId:key];
    if (expectedSequenceNumber != ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_ANY_SEQUENCE_NUMBER && (entry_ == nil || entry_->sequenceNumber_ != expectedSequenceNumber)) {
      return nil;
    }
    if (entry_ == nil) {
      entry_ = [new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_(self, key) autorelease];
      [self->lruEntries_ putWithId:key withId:entry_];
    }
    else if (entry_->currentEditor_ != nil) {
      return nil;
    }
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *editor = [new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_(self, entry_) autorelease];
    JreStrongAssign(&((ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_, editor);
    [((JavaIoWriter *) nil_chk(self->journalWriter_)) writeWithNSString:JreStrcat("$C$C", ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_DIRTY_, ' ', key, 0x000a)];
    [self->journalWriter_ flush];
    return editor;
  }
}

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_completeEditWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_withBoolean_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *editor, jboolean success) {
  @synchronized(self) {
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *entry_ = ((ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *) nil_chk(editor))->entry__;
    if (((ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != editor) {
      @throw [new_JavaLangIllegalStateException_init() autorelease];
    }
    if (success && !entry_->readable_) {
      for (jint i = 0; i < self->valueCount_; i++) {
        if (![((JavaIoFile *) nil_chk([entry_ getDirtyFileWithInt:i])) exists]) {
          [editor abort];
          @throw [new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"edit didn't create file ", i)) autorelease];
        }
      }
    }
    for (jint i = 0; i < self->valueCount_; i++) {
      JavaIoFile *dirty = [entry_ getDirtyFileWithInt:i];
      if (success) {
        if ([((JavaIoFile *) nil_chk(dirty)) exists]) {
          JavaIoFile *clean = [entry_ getCleanFileWithInt:i];
          [dirty renameToWithJavaIoFile:clean];
          jlong oldLength = IOSLongArray_Get(nil_chk(entry_->lengths_), i);
          jlong newLength = [((JavaIoFile *) nil_chk(clean)) length];
          *IOSLongArray_GetRef(entry_->lengths_, i) = newLength;
          self->size_ = self->size_ - oldLength + newLength;
        }
      }
      else {
        ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_deleteIfExistsWithJavaIoFile_(dirty);
      }
    }
    self->redundantOpCount_++;
    JreStrongAssign(&entry_->currentEditor_, nil);
    if (entry_->readable_ | success) {
      entry_->readable_ = true;
      [((JavaIoWriter *) nil_chk(self->journalWriter_)) writeWithNSString:JreStrcat("$C$$C", ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_CLEAN_, ' ', entry_->key_, [entry_ getLengths], 0x000a)];
      if (success) {
        entry_->sequenceNumber_ = self->nextSequenceNumber_++;
      }
    }
    else {
      [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) removeWithId:entry_->key_];
      [((JavaIoWriter *) nil_chk(self->journalWriter_)) writeWithNSString:JreStrcat("$C$C", ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_REMOVE_, ' ', entry_->key_, 0x000a)];
    }
    if (self->size_ > self->maxSize_ || ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_journalRebuildRequired(self)) {
      [((id<JavaUtilConcurrentExecutorService>) nil_chk(self->executorService_)) submitWithJavaUtilConcurrentCallable:self->cleanupCallable_];
    }
  }
}

jboolean ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_journalRebuildRequired(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self) {
  jint REDUNDANT_OP_COMPACT_THRESHOLD = 2000;
  return self->redundantOpCount_ >= REDUNDANT_OP_COMPACT_THRESHOLD && self->redundantOpCount_ >= [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) size];
}

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_checkNotClosed(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self) {
  if (self->journalWriter_ == nil) {
    @throw [new_JavaLangIllegalStateException_initWithNSString_(@"cache is closed") autorelease];
  }
}

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_trimToSize(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self) {
  while (self->size_ > self->maxSize_) {
    id<JavaUtilMap_Entry> toEvict = [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilSet>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) entrySet])) iterator])) next];
    [self removeWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(toEvict)) getKey]];
  }
}

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_validateKeyWithNSString_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *self, NSString *key) {
  if ([((NSString *) nil_chk(key)) contains:@" "] || [key contains:@"\n"] || [key contains:@"\x0d"]) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"keys must not contain spaces or newlines: \"", key, '"')) autorelease];
  }
}

NSString *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_inputStreamToStringWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_initialize();
  return ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_readFullyWithJavaIoReader_([new_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharset_(inArg, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_UTF_8_) autorelease]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache)

@implementation ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)outer$
                                                              withNSString:(NSString *)key
                                                                  withLong:(jlong)sequenceNumber
                                                withJavaIoInputStreamArray:(IOSObjectArray *)ins {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(self, outer$, key, sequenceNumber, ins);
  return self;
}

- (ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *)edit {
  return ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_editWithNSString_withLong_(this$0_, key_, sequenceNumber_);
}

- (JavaIoInputStream *)getInputStreamWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(ins_), index);
}

- (NSString *)getStringWithInt:(jint)index {
  return ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_inputStreamToStringWithJavaIoInputStream_([self getInputStreamWithInt:index]);
}

- (void)close {
  {
    IOSObjectArray *a__ = ins_;
    JavaIoInputStream * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaIoInputStream * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoInputStream *in = *b__++;
      ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_closeQuietlyWithJavaIoCloseable_(in);
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(key_);
  RELEASE_(ins_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache:withNSString:withLong:withJavaIoInputStreamArray:", "Snapshot", NULL, 0x2, NULL, NULL },
    { "edit", NULL, "Lcom.example.android.displayingbitmaps.util.DiskLruCache$Editor;", 0x1, "Ljava.io.IOException;", NULL },
    { "getInputStreamWithInt:", "getInputStream", "Ljava.io.InputStream;", 0x1, NULL, NULL },
    { "getStringWithInt:", "getString", "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.example.android.displayingbitmaps.util.DiskLruCache;", NULL, NULL, .constantValue.asLong = 0 },
    { "key_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "sequenceNumber_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "ins_", NULL, 0x12, "[Ljava.io.InputStream;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot = { 2, "Snapshot", "com.example.android.displayingbitmaps.util", "DiskLruCache", 0x11, 5, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot;
}

@end

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot *self, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *ins) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->key_, key);
  self->sequenceNumber_ = sequenceNumber;
  JreStrongAssign(&self->ins_, ins);
}

ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot *new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *ins) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot *self = [ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot alloc];
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(self, outer$, key, sequenceNumber, ins);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Snapshot)

@implementation ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)outer$
              withComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *)entry_ {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_(self, outer$, entry_);
  return self;
}

- (JavaIoInputStream *)newInputStreamWithInt:(jint)index {
  @synchronized(this$0_) {
    if (((ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *) nil_chk(entry__))->currentEditor_ != self) {
      @throw [new_JavaLangIllegalStateException_init() autorelease];
    }
    if (!entry__->readable_) {
      return nil;
    }
    return [new_JavaIoFileInputStream_initWithJavaIoFile_([entry__ getCleanFileWithInt:index]) autorelease];
  }
}

- (NSString *)getStringWithInt:(jint)index {
  JavaIoInputStream *in = [self newInputStreamWithInt:index];
  return in != nil ? ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_inputStreamToStringWithJavaIoInputStream_(in) : nil;
}

- (JavaIoOutputStream *)newOutputStreamWithInt:(jint)index {
  @synchronized(this$0_) {
    if (((ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *) nil_chk(entry__))->currentEditor_ != self) {
      @throw [new_JavaLangIllegalStateException_init() autorelease];
    }
    return [new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_withJavaIoOutputStream_(self, [new_JavaIoFileOutputStream_initWithJavaIoFile_([entry__ getDirtyFileWithInt:index]) autorelease]) autorelease];
  }
}

- (void)setWithInt:(jint)index
      withNSString:(NSString *)value {
  JavaIoWriter *writer = nil;
  @try {
    writer = [new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withJavaNioCharsetCharset_([self newOutputStreamWithInt:index], JreLoadStatic(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache, UTF_8_)) autorelease];
    [writer writeWithNSString:value];
  }
  @finally {
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_closeQuietlyWithJavaIoCloseable_(writer);
  }
}

- (void)commit {
  if (hasErrors_) {
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_completeEditWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_withBoolean_(this$0_, self, false);
    [this$0_ removeWithNSString:((ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *) nil_chk(entry__))->key_];
  }
  else {
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_completeEditWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_withBoolean_(this$0_, self, true);
  }
}

- (void)abort {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_completeEditWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_withBoolean_(this$0_, self, false);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(entry__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache:withComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry:", "Editor", NULL, 0x2, NULL, NULL },
    { "newInputStreamWithInt:", "newInputStream", "Ljava.io.InputStream;", 0x1, "Ljava.io.IOException;", NULL },
    { "getStringWithInt:", "getString", "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "newOutputStreamWithInt:", "newOutputStream", "Ljava.io.OutputStream;", 0x1, "Ljava.io.IOException;", NULL },
    { "setWithInt:withNSString:", "set", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "commit", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "abort", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.example.android.displayingbitmaps.util.DiskLruCache;", NULL, NULL, .constantValue.asLong = 0 },
    { "entry__", "entry", 0x12, "Lcom.example.android.displayingbitmaps.util.DiskLruCache$Entry;", NULL, NULL, .constantValue.asLong = 0 },
    { "hasErrors_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.example.android.displayingbitmaps.util.DiskLruCache$Editor$FaultHidingOutputStream;"};
  static const J2ObjcClassInfo _ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor = { 2, "Editor", "com.example.android.displayingbitmaps.util", "DiskLruCache", 0x11, 7, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor;
}

@end

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *self, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *entry_) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->entry__, entry_);
}

ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *entry_) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *self = [ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor alloc];
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_(self, outer$, entry_);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor)

@implementation ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *)outer$
                                                           withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_withJavaIoOutputStream_(self, outer$, outArg);
  return self;
}

- (void)writeWithInt:(jint)oneByte {
  @try {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:oneByte];
  }
  @catch (JavaIoIOException *e) {
    this$0_->hasErrors_ = true;
  }
}

- (void)writeWithByteArray:(IOSByteArray *)buffer
                   withInt:(jint)offset
                   withInt:(jint)length {
  @try {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buffer withInt:offset withInt:length];
  }
  @catch (JavaIoIOException *e) {
    this$0_->hasErrors_ = true;
  }
}

- (void)close {
  @try {
    [((JavaIoOutputStream *) nil_chk(out_)) close];
  }
  @catch (JavaIoIOException *e) {
    this$0_->hasErrors_ = true;
  }
}

- (void)flush {
  @try {
    [((JavaIoOutputStream *) nil_chk(out_)) flush];
  }
  @catch (JavaIoIOException *e) {
    this$0_->hasErrors_ = true;
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor:withJavaIoOutputStream:", "FaultHidingOutputStream", NULL, 0x2, NULL, NULL },
    { "writeWithInt:", "write", "V", 0x1, NULL, NULL },
    { "writeWithByteArray:withInt:withInt:", "write", "V", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "flush", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.example.android.displayingbitmaps.util.DiskLruCache$Editor;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream = { 2, "FaultHidingOutputStream", "com.example.android.displayingbitmaps.util", "DiskLruCache$Editor", 0x2, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream;
}

@end

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_withJavaIoOutputStream_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream *self, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *outer$, JavaIoOutputStream *outArg) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaIoFilterOutputStream_initWithJavaIoOutputStream_(self, outArg);
}

ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream *new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_withJavaIoOutputStream_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor *outer$, JavaIoOutputStream *outArg) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream *self = [ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream alloc];
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_withJavaIoOutputStream_(self, outer$, outArg);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Editor_FaultHidingOutputStream)

@implementation ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)outer$
                                                              withNSString:(NSString *)key {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_(self, outer$, key);
  return self;
}

- (NSString *)getLengths {
  JavaLangStringBuilder *result = [new_JavaLangStringBuilder_init() autorelease];
  {
    IOSLongArray *a__ = lengths_;
    jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong size = *b__++;
      [((JavaLangStringBuilder *) nil_chk([result appendWithChar:' '])) appendWithLong:size];
    }
  }
  return [result description];
}

- (void)setLengthsWithNSStringArray:(IOSObjectArray *)strings {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_setLengthsWithNSStringArray_(self, strings);
}

- (JavaIoIOException *)invalidLengthsWithNSStringArray:(IOSObjectArray *)strings {
  return ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_invalidLengthsWithNSStringArray_(self, strings);
}

- (JavaIoFile *)getCleanFileWithInt:(jint)i {
  return [new_JavaIoFile_initWithJavaIoFile_withNSString_(this$0_->directory_, JreStrcat("$CI", key_, '.', i)) autorelease];
}

- (JavaIoFile *)getDirtyFileWithInt:(jint)i {
  return [new_JavaIoFile_initWithJavaIoFile_withNSString_(this$0_->directory_, JreStrcat("$CI$", key_, '.', i, @".tmp")) autorelease];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(key_);
  RELEASE_(lengths_);
  RELEASE_(currentEditor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache:withNSString:", "Entry", NULL, 0x2, NULL, NULL },
    { "getLengths", NULL, "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "setLengthsWithNSStringArray:", "setLengths", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "invalidLengthsWithNSStringArray:", "invalidLengths", "Ljava.io.IOException;", 0x2, "Ljava.io.IOException;", NULL },
    { "getCleanFileWithInt:", "getCleanFile", "Ljava.io.File;", 0x1, NULL, NULL },
    { "getDirtyFileWithInt:", "getDirtyFile", "Ljava.io.File;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.example.android.displayingbitmaps.util.DiskLruCache;", NULL, NULL, .constantValue.asLong = 0 },
    { "key_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "lengths_", NULL, 0x12, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "readable_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "currentEditor_", NULL, 0x2, "Lcom.example.android.displayingbitmaps.util.DiskLruCache$Editor;", NULL, NULL, .constantValue.asLong = 0 },
    { "sequenceNumber_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry = { 2, "Entry", "com.example.android.displayingbitmaps.util", "DiskLruCache", 0x12, 6, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry;
}

@end

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *self, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$, NSString *key) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->key_, key);
  JreStrongAssignAndConsume(&self->lengths_, [IOSLongArray newArrayWithLength:outer$->valueCount_]);
}

ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$, NSString *key) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *self = [ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry alloc];
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_withNSString_(self, outer$, key);
  return self;
}

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_setLengthsWithNSStringArray_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *self, IOSObjectArray *strings) {
  if (((IOSObjectArray *) nil_chk(strings))->size_ != self->this$0_->valueCount_) {
    @throw ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_invalidLengthsWithNSStringArray_(self, strings);
  }
  @try {
    for (jint i = 0; i < strings->size_; i++) {
      *IOSLongArray_GetRef(nil_chk(self->lengths_), i) = JavaLangLong_parseLongWithNSString_(IOSObjectArray_Get(strings, i));
    }
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_invalidLengthsWithNSStringArray_(self, strings);
  }
}

JavaIoIOException *ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry_invalidLengthsWithNSStringArray_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry *self, IOSObjectArray *strings) {
  @throw [new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"unexpected journal line: ", JavaUtilArrays_toStringWithNSObjectArray_(strings))) autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_Entry)

@implementation ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1

- (id)call {
  @synchronized(this$0_) {
    if (this$0_->journalWriter_ == nil) {
      return nil;
    }
    ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_trimToSize(this$0_);
    if (ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_journalRebuildRequired(this$0_)) {
      ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_rebuildJournal(this$0_);
      this$0_->redundantOpCount_ = 0;
    }
  }
  return nil;
}

- (instancetype)initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache:(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *)outer$ {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "call", NULL, "Ljava.lang.Void;", 0x1, "Ljava.lang.Exception;", NULL },
    { "initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.example.android.displayingbitmaps.util.DiskLruCache;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1 = { 2, "", "com.example.android.displayingbitmaps.util", "DiskLruCache", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Void;>;" };
  return &_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1;
}

@end

void ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1 *self, ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1 *new_ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache *outer$) {
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1 *self = [ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1 alloc];
  ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1_initWithComExampleAndroidDisplayingbitmapsUtilDiskLruCache_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComExampleAndroidDisplayingbitmapsUtilDiskLruCache_$1)
